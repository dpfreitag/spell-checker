// load function for spell checker 

// hash function Similar to the PJW Hash function, but tweaked for 32-bit processors. 
// Its the hash function widely used on most UNIX systems. 
// downloaded from http://www.partow.net/programming/hashfunctions/#ELFHashFunction

unsigned int ELFHash(char* str, unsigned int len)
{
	unsigned int hash = 0;
	unsigned int x    = 0;
	unsigned int i    = 0;
	for(i = 0; i < len; str++, i++)
	{
      hash = (hash << 4) + (*str);
		if((x = hash & 0xF0000000L) != 0)
		{
			hash ^= (x >> 24);
		}
      hash &= ~x;
	}
	return hash;
}

typedef struct node
{
  char word [length +1];
  struct node* next;
}
node;
node* hashtable[1000];

// Declare variables
char hashtable[100003];
int hashvalue;
char new_node;

FILE *file = fopen(dictionary,"r");
	if(file == NULL)
	{
		printf ("Can't open %s file", dictionary);
		return false;
	}


// read dictionary file one word at a time and insert in link list
while (fscan (file, "%s", word) != EOF)
{
   node* new_node = malloc(sizeof(node));
   if (new_node==NULL)
   {
      unload();
      return false:
   }
   hashvalue = ELFhash(word);
   strcpy(new_node -> next = hashtable[hashvalue]);
   new_node -> next = hashtable[hashvalue];
   hashtable[hashvalue} = new_node;
}
